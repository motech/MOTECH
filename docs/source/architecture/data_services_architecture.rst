Motech Data Services Architecture
=================================

MOTECH Data Services (MDS) is responsible for creation of Data Models for MOTECH Platform either using Developer Defined Entities (DDE) or End User Defined Entities (EUDE). DDEs use custom annotated POJO mark them as MDS entities. The EUDEs can be created as well as configured from UI along with their Data Access Layer. Centre of Data Access Layer is Generic Data Access Pattern Class which defines generic persistence related methods.

         .. image:: mds_architecture.png
            :scale: 100 %
	  		:alt: Motech Data Services Architecture Diagram
            :align: center


        Section following describes motech data services architecture in figure.

MDS UI Layer
============

#.Schema Editor: It is responsible for creating new EUDEs and also to edit already existing entities (Adding new fields and their lookups).
#.Data Browser: It is responsible for browsing through entities.
#.Settings: It is responsible for setting data retention policies .i.e. managing trash and history data. It also provides an option to export and import schema using csv as input or output.

MDS Web
=======

It acts as controller between MDS UI Layer and MDS Core Layer to view, create and update EUDE and it’s infrastructure classes .i.e services and repositories and to view and update DDE and it’s infrastructure classes .i.e services and repositories. It use pre defined services of MDS.

MDS Core Layer 
==============

#. MDS Initializer: It is responsible for building all entites in MDS database. It use MDS Constructor for building entites. It’s using TransactionalCallBackWithout Result of Spring framework for configuring Transaction. It includes MDSWeavingHook which is responsible for hooking into OSGi class loading process to dynamically add Jdo Imports and replacing DDE’s with thier bytecodes (extended version) generated by MDS.

Added Jdo Imports are as follows:-
javax.jdo,javax.jdo.identity,javax.jdo.spi,org.joda.time,org.apache.commons.lang,org.springframework.transaction.support,org.motechproject.mds.filter,org.motechproject.mds.query,org.motechproject.mds.util,org.motechproject.commons.date.util,org.datanucleus.enhancer,org.datanucleus,org.datanucleus.state,org.datanucleus.asm,org.datanucleus.exceptions,org.datanucleus.metadata,org.datanucleus.plugin,org.datanucleus.util,org.datanucleus.identity


#. MDS Constructor: It provides methods to create entities, their service implementations and corresponding interfaces.

#. Entity Builder: It is use to build classes of a given entities.

#. Infrastructure Builder: It is responsible for building infrastructure for a given entity .i.e repository, interface and service classes. These classes are created only if not available in the classpath using  javassist to construct them.

#. Metadata Builder: It is responsible for generating JDO metadata for entity.

#. Enum Builder: Value defined in Combo Box/ Field Metadata will be used to create an Enum.

#. Lookup Builder: It allows to create a method without body and added into javassist service interface and method with body added into javassist service class.

#. Processors: Processors process DDEs based on annotations and create Infrastructure and Metadata Information for those entities which can used via DataNucleus enhancer to enhance entities to use them for Persistence Operations.

#. JDO Enhancer: It extends DataNuclues JDOEnhancer. It enhances classes to add missing information so that the classes can be used by DataNuclues for persistance related operations.

#. MDS Data Provider: It creates Mds data provider json to register in task module.

#. Infrastructure Classes, EUDE and DDE: It represents all entities, services, repositories of entities used by MDS Web module to represent MDS entities in UI.

#. Pre Defined Service Section:
Mds provide some predefined services used by Mds Web and other modules of motech platform :

    *Action Handler Service: It provides methods for handling tasks actions events related
    with MDS CRUD operations .i.e. create, update and delete.

    * Bundle watcher Suspension Service: An OSGi service, allowing to temporarily disable bundle processing by MDS. When processing gets suspended, MDS will still listen to bundle events, but instead of processing them, they will be queued and processed after the processing gets restored. This allows, besides others, to install/uninstall a larger amount of bundles at one time, without facing annotation processing problems.

    * Csv Export Customizer: It provides custom methods to format related instances during csv export.

    * Csv Import Customizer: It provides custom methods for searching, creating and updating instances during csv import.

    * Csv Import Export Customizer: Service providing methods for importing and exporting instances using csv.

    * Motech Data Service: Centre of Data Access Layer is Generic Data Access Pattern Class which defines generic persistence related methods. Superclass for defining service of any Entity in MDS.

    * Entity Service: It defines CRUD actions on entities.

    * History Service: It persists changes made on given instance. It captures instances which are not in trash.

    * Trash Service: It provides methods related to trash mode (By Default, trash mode is active and can be turned off by user.)

    * Jar Generator Service: It creates a bundle jar with all entities defined in MDS.

    * Json LookUp Service: Service for managing lookups from JSON.

    * MDS Bundle Regeneration Service: It provides methods to regenerate bundle and regenerate bundle after dde enhancement. This service use Jar Generator Service to regenerate bundle.

    * MDS LookUp Service: It provides a methods for processing lookups for particular entity given names, class names as well as String names. It provides a generic access to entities.

    * MDS Scheduler Service: It provides methods to schedule and unschedule a repeating job. It used for emptying trash periodically.

    * Migration Service: It provides method to find flyway migrations within bundle (Default Search location is db/migration).

    * Type Service: It provides methods for defining methods for executing actions on type.
    Rest Documentation Service. It provides functionality of dynamically generated MDS Rest Documentation.

    * JDO Listener Registry Service: It provides access to registry of Listeners for Persistence events .i.e. POST_CREATE, PRE_DELETE, POST_DELETE, POST_LOAD, PRE_STORE and POST_STORE.It handles pre and post events of crud events of DataNuclues.




Notes
-----
*  Custom Annotations, their processing and actions performed on those annotations is a part of MDS. These processors process DDEs and create Metadata as well as Infrastructure Information for those entities which can used via DataNucleus enhancer to enhance entities to use them for Persistence Operations.
*  EUDEs, the related Data Access Layer and their related MetaData Information is generated which can be used by DataNucleus for Persistence Operations.

*  Above mentioned Entities and related Data Access Layer and Metadata information are created during bootstrapping of MOTECH Platform.

*  Whenever an EUDE is defined from UI, 'MOTECH Data Services' bundle is regenerated.

*  Whenever EUDE lookups are defined using UI, 'MOTECH Data Service' bundles is regenerated.

* MDS also provides features to create REST APIs for creating, updating, deleting and searching the instances of the Entities created.

* Feature To download/upload schema using csv as input or output.
