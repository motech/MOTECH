package org.motechproject.mds.builder;

import org.motechproject.mds.domain.ClassData;
import org.motechproject.mds.dto.EntityDto;
import org.motechproject.mds.dto.SchemaHolder;

import java.util.List;

/**
 * The <code>EntityInfrastructureBuilder</code> is responsible for building infrastructure for a given entity:
 * repository, interface and service classes.
 */
public interface EntityInfrastructureBuilder {

    /**
     * Builds the repository, interface and implementation of this interface classes for the
     * given entity. The names for classes are generated by
     * {@link org.motechproject.mds.util.ClassName#getRepositoryName(String)},
     * {@link org.motechproject.mds.util.ClassName#getInterfaceName(String)},
     * {@link org.motechproject.mds.util.ClassName#getServiceClassName(String)}, respectively.
     *
     * @param entity an instance of {@link org.motechproject.mds.domain.Entity}
     * @param schemaHolder the current MDS schema holder
     * @return a list of classes that represents infrastructure for the given entity.
     */
    List<ClassData> buildInfrastructure(EntityDto entity, SchemaHolder schemaHolder);

    /**
     * Builds the repository, interface and implementation of this interface classes for the
     * given history class. The names for classes are generated by
     * {@link org.motechproject.mds.util.ClassName#getRepositoryName(String)},
     * {@link org.motechproject.mds.util.ClassName#getInterfaceName(String)},
     * {@link org.motechproject.mds.util.ClassName#getServiceClassName(String)}, respectively.
     *
     * @param className a name of history class.
     * @return a list of classes that represents infrastructure for the history class.
     */
    List<ClassData> buildHistoryInfrastructure(String className);

}
