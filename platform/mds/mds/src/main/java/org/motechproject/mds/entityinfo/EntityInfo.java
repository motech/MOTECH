package org.motechproject.mds.entityinfo;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Predicate;
import org.apache.commons.lang.StringUtils;
import org.codehaus.jackson.annotate.JsonIgnore;
import org.motechproject.mds.dto.AdvancedSettingsDto;
import org.motechproject.mds.dto.EntityDto;
import org.motechproject.mds.dto.FieldDto;
import org.motechproject.mds.dto.LookupDto;
import org.motechproject.mds.exception.field.FieldNotFoundException;
import org.motechproject.mds.util.ClassName;
import org.motechproject.mds.util.SecurityMode;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * The <code>EntityInfo</code> class contains base information about the given entity, like its class
 * name or infrastructure class names.
 *
 * @see org.motechproject.mds.service.JarGeneratorService
 */
public class EntityInfo {

    private EntityDto entity;
    private AdvancedSettingsDto advancedSettings;

    private List<FieldInfo> fieldsInfo;
    private String repository;
    private String interfaceName;
    private String serviceClass;
    private String serviceName;

    public String getRepository() {
        return repository;
    }

    public void setRepository(String repository) {
        this.repository = repository;
    }

    public String getInterfaceName() {
        return interfaceName;
    }

    public void setInterfaceName(String interfaceName) {
        this.interfaceName = interfaceName;
    }

    public String getServiceClass() {
        return serviceClass;
    }

    public void setServiceClass(String serviceClass) {
        this.serviceClass = serviceClass;
    }

    public String getServiceName() {
        return serviceName;
    }

    public void setServiceName(String serviceName) {
        this.serviceName = serviceName;
    }

    public List<FieldInfo> getFieldsInfo() {
        return fieldsInfo;
    }

    public void setFieldsInfo(List<FieldInfo> fieldsInfo) {
        this.fieldsInfo = fieldsInfo;
    }

    public EntityDto getEntity() {
        return entity;
    }

    public void setEntity(EntityDto entity) {
        this.entity = entity;
    }

    public AdvancedSettingsDto getAdvancedSettings() {
        return advancedSettings;
    }

    public void setAdvancedSettings(AdvancedSettingsDto advancedSettings) {
        this.advancedSettings = advancedSettings;
    }

    @JsonIgnore
    public String getName() {
        return ClassName.getSimpleName(getClassName());
    }

    @JsonIgnore
    public String getClassName() {
        return entity.getClassName();
    }

    @JsonIgnore
    public String[] getInfrastructure() {
        return new String[]{repository, interfaceName, serviceClass};
    }

    @JsonIgnore
    public String getNamespace() {
        return entity.getNamespace();
    }

    @JsonIgnore
    public String getModule() {
        return entity.getModule();
    }

    @JsonIgnore
    public String getEntityName() {
        return entity.getName();
    }

    @JsonIgnore
    public String getRestId() {
        return ClassName.restId(getEntityName(), getModule(), getNamespace());
    }

    @JsonIgnore
    public boolean isCreateEventFired() {
        return advancedSettings.getTracking().isAllowCreateEvent();
    }

    @JsonIgnore
    public boolean isUpdateEventFired() {
        return advancedSettings.getTracking().isAllowUpdateEvent();
    }

    @JsonIgnore
    public boolean isDeleteEventFired() {
        return advancedSettings.getTracking().isAllowDeleteEvent();
    }

    @JsonIgnore
    public boolean isRestCreateEnabled() {
        return advancedSettings.getRestOptions().isCreate();
    }

    @JsonIgnore
    public boolean isRestReadEnabled() {
        return advancedSettings.getRestOptions().isRead();
    }

    @JsonIgnore
    public boolean isRestUpdateEnabled() {
        return advancedSettings.getRestOptions().isUpdate();
    }

    @JsonIgnore
    public boolean isRestDeleteEnabled() {
        return advancedSettings.getRestOptions().isDelete();
    }

    @JsonIgnore
    public boolean isRecordHistory() {
        return entity.isRecordHistory();
    }

    @JsonIgnore
    public Long getSchemaVersion() {
        return entity.getSchemaVersion();
    }

    @JsonIgnore
    public SecurityMode getSecurityMode() {
        return entity.getSecurityMode();
    }

    @JsonIgnore
    public List<FieldInfo> getNonAutoFieldInfos() {
        List<FieldInfo> nonAuto = new ArrayList<>(fieldsInfo);
        CollectionUtils.filter(nonAuto, new Predicate() {
            @Override
            public boolean evaluate(Object object) {
                return !((FieldInfo) object).isAutoGenerated();
            }
        });
        return nonAuto;
    }

    @JsonIgnore
    public List<FieldInfo> getRestFieldInfos() {
        List<FieldInfo> nonAuto = new ArrayList<>(fieldsInfo);
        CollectionUtils.filter(nonAuto, new Predicate() {
            @Override
            public boolean evaluate(Object object) {
                return ((FieldInfo) object).isRestExposed();
            }
        });
        return nonAuto;
    }

    @JsonIgnore
    public static Collection<EntityInfo> entitiesWithAnyCRUDAction(Collection<EntityInfo> entityInfos) {
        Collection<EntityInfo> entitiesWithAnyCRUDAction = new ArrayList<>();
        for (EntityInfo entityInfo : entityInfos) {
            if (entityInfo.isCreateEventFired() || entityInfo.isUpdateEventFired() || entityInfo.isDeleteEventFired()) {
                entitiesWithAnyCRUDAction.add(entityInfo);
            }
        }
        return entitiesWithAnyCRUDAction;
    }

    @JsonIgnore
    public boolean supportAnyRestAccess() {
        return isRestCreateEnabled() || isRestReadEnabled() || isRestUpdateEnabled() ||
                isRestDeleteEnabled();
    }

    @JsonIgnore
    public List<FieldDto> getFieldDtos() {
        List<FieldDto> fieldDtos = new ArrayList<>();
        for (FieldInfo fieldInfo : fieldsInfo) {
            fieldDtos.add(fieldInfo.getField());
        }
        return fieldDtos;
    }

    @JsonIgnore
    public List<LookupDto> getLookups() {
        return advancedSettings.getIndexes();
    }

    @JsonIgnore
    public FieldInfo getField(String name) {
        for (FieldInfo fieldInfo : fieldsInfo) {
            if (StringUtils.equals(name, fieldInfo.getName())) {
                return fieldInfo;
            }
        }
        throw new FieldNotFoundException(getClassName(), name);
    }
}
