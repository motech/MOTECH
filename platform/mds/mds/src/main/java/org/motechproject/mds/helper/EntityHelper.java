package org.motechproject.mds.helper;

import org.joda.time.DateTime;
import org.motechproject.mds.domain.Entity;
import org.motechproject.mds.domain.Field;
import org.motechproject.mds.domain.FieldMetadata;
import org.motechproject.mds.domain.Lookup;
import org.motechproject.mds.domain.RelationshipHolder;
import org.motechproject.mds.domain.Type;
import org.motechproject.mds.repository.AllTypes;
import org.motechproject.mds.util.Constants;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import static org.motechproject.mds.util.Constants.Util.AUTO_GENERATED;
import static org.motechproject.mds.util.Constants.Util.AUTO_GENERATED_EDITABLE;
import static org.motechproject.mds.util.Constants.Util.TRUE;

/**
 * The <code>EntityHelper</code> class contains useful methods that helps managing entities.
 *
 * @see org.motechproject.mds.domain.Entity
 */
public final class EntityHelper {

    private EntityHelper() {
    }

    /**
     * Adds default fields to entity
     * @param entity entity to add fields to
     * @param allTypes types repository
     */
    public static void addDefaultFields(Entity entity, AllTypes allTypes) {
        Type longType = allTypes.retrieveByClassName(Long.class.getName());
        Type stringType = allTypes.retrieveByClassName(String.class.getName());
        Type dateTimeType = allTypes.retrieveByClassName(DateTime.class.getName());

        Field idField = new Field(entity, Constants.Util.ID_FIELD_NAME, Constants.Util.ID_DISPLAY_FIELD_NAME, longType,
                true, true, true);
        idField.addMetadata(new FieldMetadata(idField, AUTO_GENERATED, TRUE));

        Field creatorField = new Field(entity, Constants.Util.CREATOR_FIELD_NAME, Constants.Util.CREATOR_DISPLAY_FIELD_NAME, stringType, true, false, true);
        creatorField.addMetadata(new FieldMetadata(creatorField, AUTO_GENERATED, TRUE));

        Field ownerField = new Field(entity, Constants.Util.OWNER_FIELD_NAME, Constants.Util.OWNER_DISPLAY_FIELD_NAME, stringType, false, false, true);
        ownerField.addMetadata(new FieldMetadata(ownerField, AUTO_GENERATED_EDITABLE, TRUE));

                Field modifiedByField = new Field(entity, Constants.Util.MODIFIED_BY_FIELD_NAME, Constants.Util.MODIFIED_BY_DISPLAY_FIELD_NAME, stringType, true, false, true);
        modifiedByField.addMetadata(new FieldMetadata(modifiedByField, AUTO_GENERATED, TRUE));

        Field modificationDateField = new Field(entity, Constants.Util.MODIFICATION_DATE_FIELD_NAME, Constants.Util.MODIFICATION_DATE_DISPLAY_FIELD_NAME, dateTimeType, true, false, true);
        modificationDateField.addMetadata(new FieldMetadata(modificationDateField, AUTO_GENERATED, TRUE));

        Field creationDateField = new Field(entity, Constants.Util.CREATION_DATE_FIELD_NAME, Constants.Util.CREATION_DATE_DISPLAY_FIELD_NAME, dateTimeType, true, false, true);
        creationDateField.addMetadata(new FieldMetadata(creationDateField, AUTO_GENERATED, TRUE));

        entity.addField(idField);
        entity.addField(creatorField);
        entity.addField(ownerField);
        entity.addField(modifiedByField);
        entity.addField(creationDateField);
        entity.addField(modificationDateField);
    }

    /**
     * In case of DDE, removes all fields and lookups that are not part of the original schema (was added later).
     * In case of EUDE, removes all fields and lookups.
     * @param entity entity to remove fields and lookups from
     */
    public static void removeAdditionalFieldsAndLookups(Entity entity) {
        Iterator<Field> fieldIterator = entity.getFields().iterator();
        while (fieldIterator.hasNext()) {
            Field field = fieldIterator.next();
            if (!field.isAutoGenerated() && !field.isReadOnly()) {
                fieldIterator.remove();
            }
        }

        Iterator<Lookup> lookupIterator = entity.getLookups().iterator();
        while (lookupIterator.hasNext()) {
            Lookup lookup = lookupIterator.next();
            if (!lookup.isReadOnly()) {
                lookupIterator.remove();
            }
        }
    }

    /**
     * Retrieves all entity classes that are referenced from entity.
     * @param entity entity for which related classes will be retrieved
     * @return related entity classes names
     */
    public static List<String> getRelatedEntityClasses(Entity entity) {
        List<String> relatedEntityClasses = new ArrayList<>();
        for (Field field : entity.getFields()) {
            if (field.getType().isRelationship()) {
                relatedEntityClasses.add(new RelationshipHolder(field).getRelatedClass());
            }
        }
        return relatedEntityClasses;
    }
}
